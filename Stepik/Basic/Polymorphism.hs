module Stepik.Basic.Polymorphism where

import Data.Function

{-
  Напишите функцию трех аргументов getSecondFrom, полиморфную по каждому из них, 
  которая полностью игнорирует первый и третий аргумент, а возвращает второй. 
-}
getSecondFrom :: a -> b -> c -> b
getSecondFrom = \_ x _ -> x

{-
  Функция multSecond, перемножающая вторые элементы пар, реализована следующим образом.
  Напишите реализацию функций g и h.
  -- on op f x y = f x `op` f y
-}
multSecond = g `on` h
g = (*)
h = (snd)

{-
  Реализуйте функцию on3, имеющую семантику, схожую с on, 
  но принимающую в качестве первого аргумента трехместную функцию
-}
on3 :: (b -> b -> b -> c) -> (a -> b) -> a -> a -> a -> c
on3 op f x y z = op (f x) (f y) (f z)

{-
  Функция одной переменной doItYourself выбирает наибольшее из переданного 
  ей аргумента и числа 42, затем возводит результат выбора в куб и, наконец, 
  вычисляет логарифм по основанию 2 от полученного числа. 
  Напишите реализации функций f, g и h.
-}
doItYourself = f' . g' . h'
f' = logBase 2
g' = (^3)
h' = max 42
