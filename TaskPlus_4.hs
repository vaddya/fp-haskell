import Todo(todo)

{-
  Задание 1
  Дана пара отсортированных списков чисел lst1 и lst2. Необходимо вернуть отсортированный 
  список, образованный объединением lst1 и lst2. Функцию sort использовать нельзя.
-}

merge :: [Int] -> [Int] -> [Int]
merge lst1 lst2 = todo

{-
  Задание 2
  Реализуйте тип данных, позволяющий задавать команды управления лентой вида 
  "Влево на определённое число шагов", "Вправо на определённое число шагов", "Запись". 
  Реализуйте функцию, которая принимает на вход список команд и начальную позицию и 
  возвращает список позиций, на которых происходила запись.
-}

data Command = Left Int | Right Int | Write

writePoints :: [Command] -> [Int]
writePoints cmds = todo

{-
  Задание 3
  Дан список чисел. Необходимо посчитать число чётных и нечётных чисел в этом списке.
-}

evenAndOdd :: [Int] -> (Int, Int)
evenAndOdd lst = todo

{-
  Задание 4
  Дан список чисел и функция f :: Int -> Int -> Int. 
  Необходимо найти такую пару чисел (a,b) в списке, что f a b максимально.
-}

maxBy :: (Int -> Int -> Int) -> [Int] -> Maybe (Int, Int)
maxBy f lst = todo

{-
  Задание 5
  Дан список чисел, число n и функция f :: Int -> Int -> Int. 
  Необходимо найти любую такую пару чисел (a,b) в списке, что f a b равно n.
-}

findBy :: (Int -> Int -> Int) -> Int -> [Int] -> Maybe (Int, Int)
findBy f n lst = todo

{-
  Задание 6
  Даны два списка чисел, a и b. Нужно посчитать произведение 
  всех попарных сумм элементов из a и b.
-}

productSum :: [Int] -> [Int] -> Int
productSum a b = todo

{-
  Задание 7
  Дано число n и функция f :: a -> a.
  Необходимо вернуть функцию, которая применяет f к своему аргументу n раз.
-}

applyN :: (a -> a) -> Int -> a
applyN f n = todo

{-
  Задание 8
  Дан список функций fs :: [Int -> Int] и число x.
  Необходимо применить все функции из fs к x в порядке встречаемости в fs.
-}

applyAll :: [Int -> Int] -> Int -> Int
applyAll fs x = todo
